name: Update CHANGES.md with PR Title, User ID, and Commit Messages on Merge

on:
  pull_request:
    types: [closed]
    branches: [develop]

jobs:
  update-changes-md:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history to access all PR commits

      - name: Read version from version.properties
        id: read_version
        run: |
          # Extract version.name from version.properties in the root folder
          VERSION_NAME=$(grep 'version.name' version.properties | cut -d'=' -f2 | xargs)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Capture PR title, user ID, and commit messages
        id: pr_info
        run: |
          # Capture the PR title, version name, and user ID
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION_NAME="${{ env.VERSION_NAME }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Get the base commit (merge-base) and the PR commits
          BASE_COMMIT=$(git merge-base origin/develop HEAD)


          # Prepare the full changelog entry
          NEW_ENTRY="- ${PR_TITLE} [Link to PR]($PR_URL)"

          # Check if PR title already exists anywhere in CHANGES.md
          if grep -qF "${PR_TITLE}" app/CHANGES.md; then
            echo "PR title already exists in CHANGES.md. Skipping update."
            exit 0
          fi

          # Check if the version header already exists in CHANGES.md
          if grep -q "## ${VERSION_NAME}" app/CHANGES.md; then
            # If version header exists, add PR title with commit messages under it
            sed -i "/## ${VERSION_NAME}/a ${NEW_ENTRY}" app/CHANGES.md
          else
            # If version header doesn't exist, create it with PR title and commit messages at the top of the file
            echo -e "## ${VERSION_NAME}\n${NEW_ENTRY}\n\n$(cat app/CHANGES.md)" > app/CHANGES.md
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Stage and amend the latest commit
        run: |
          git add app/CHANGES.md
          git commit --amend --no-edit
          git push origin HEAD:develop --force
