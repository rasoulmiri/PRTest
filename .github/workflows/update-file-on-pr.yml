name: Update CHANGES.md with PR Title and Description on Merge

on:
  pull_request:
    types: [closed]
    branches: [main]  # Check for merges into the main branch

jobs:
  update-changes-md:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history to access all PR commits

      - name: Read version from version.properties
        id: read_version
        run: |
          # Extract version.name from version.properties in the root folder
          VERSION_NAME=$(grep 'version.name' version.properties | cut -d'=' -f2 | tr -d '[:space:]')  # Use tr to trim spaces
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Capture PR title, version name, and PR description
        id: pr_info
        run: |
          # Capture the PR title, version name, and PR URL
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION_NAME="${{ env.VERSION_NAME }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Extract the PR body (description) from the PR's body
          PR_BODY="${{ github.event.pull_request.body }}"

          # Extract the part of the body after "### Changes For Release" and before the next "###"
          PR_DESCRIPTION=$(echo "$PR_BODY" | awk '/### Changes For Release/{flag=1; next} /###/{flag=0} flag')

          # Prepare the changelog entry with the PR title and description
          NEW_ENTRY="- ${PR_TITLE} [Link to PR]($PR_URL)\n${PR_DESCRIPTION}"

          # Check if PR title already exists in CHANGES.md
          if grep -qF "${PR_TITLE}" app/CHANGES.md; then
            echo "PR title already exists in CHANGES.md. Skipping update."
            exit 0
          fi

          # Check if the version header already exists in CHANGES.md
          if grep -q "## ${VERSION_NAME}" app/CHANGES.md; then
            # If version header exists, add PR title and description under it
            # We use sed to append the new entry after the version header.
            sed -i '/## '${VERSION_NAME}'/a\
            '"${NEW_ENTRY}" app/CHANGES.md
          else
            # If version header doesn't exist, create it with PR title and description at the top
            # We can ensure the correct formatting by prepending the version header and the new entry to the file
            printf "## ${VERSION_NAME}\n${NEW_ENTRY}\n\n$(cat app/CHANGES.md)" > app/CHANGES.md
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Stage and amend the latest commit
        run: |
          git add app/CHANGES.md
          git commit --amend --no-edit
          git push origin HEAD:main --force  # Push to the main branch
